name: Deployment workflow

on:
  push:
    branches:
      - main

env:
  NODE_ENV: test
  PORT: ${{ secrets.PORT }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  TEST_DB_URI: ${{ secrets.TEST_DB_URI }}
  AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  lint_and_test:
    name: 'Lint and test'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: 'Lint & test'
        run: |
          npm install --prefix ./packages/backend
          npm run lint --prefix ./packages/backend && npm run test --prefix ./packages/backend
          npm install --prefix ./packages/frontend
          npm run lint --prefix ./packages/frontend

  check_changes:
    name: 'Check for changes'
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.changes.outputs.backend }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - uses: actions/checkout@v2
      - name: 'Check for changes'
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - packages/frontend/**
            backend:
              - packages/backend/**

  build_backend:
    if: ${{ needs.check_changes.outputs.backend_changed == 'true' }}
    name: 'Build backend'
    runs-on: ubuntu-latest
    needs: [lint_and_test, check_changes]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: 'Build backend'
        run: |
          npm install --prefix ./packages/backend
          ./packages/backend/build.sh
      - name: Upload backend artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: backend
          path: ./dist.zip

  deploy_backend:
    if: ${{ needs.check_changes.outputs.backend_changed == 'true' }}
    name: Deploy backend
    runs-on: ubuntu-latest
    needs: [build_backend, check_changes]
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: backend
      - name: Unzip artifact
        run: unzip dist.zip && mv dist/* . && rm -rf dist dist.zip

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'postbuddy-api'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_C7190BF5B21E4CFBBE09A130C724085D }}
          package: .

  deploy_frontend:
    if: ${{ needs.check_changes.outputs.frontend_changed == 'true' }}
    name: Deploy frontend
    runs-on: ubuntu-latest
    needs: [lint_and_test, check_changes]
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        working-directory: ./packages/frontend
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        working-directory: ./packages/frontend
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        working-directory: ./packages/frontend
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  notify_if_failure:
    if: ${{ needs.deploy_backend.result == 'failure' || needs.deploy_frontend.result == 'failure' }}
    name: Notify if failure
    needs: [deploy_backend, deploy_frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Something failed
        if: ${{ needs.deploy_backend.result == 'failure' || needs.deploy_frontend.result == 'failure' }}
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: error
          details: Deployment failed
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
